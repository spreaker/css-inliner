#!/usr/bin/env node

var juice = require('juice2');
var fs    = require('fs');

// Parse arguments
var optimist = require('optimist')
    .usage('Read an input file or stding, inline styles and save the output to a new file or stdout.')
    .options('i', { alias: 'input', describe: 'Input file'})
    .options('o', { alias: 'output', describe: 'Output file'})
    .boolean('p')
    .options('p', { alias: 'preserve-mq', describe: 'Preserve media queries', default: false })
    .boolean('r')
    .options('r', { alias: 'remove-styles', describe: 'Remove styles tag', default: false })
    .boolean('h')
    .options('h', { alias: 'help', describe: 'Show this help' });

var args = optimist.argv;

function readInput(stream, callback)
{
    var html = "";

    inputStream.setEncoding('utf8');

    inputStream.on('data', function(data){
        html += data;
    });

    inputStream.on('end', function(){
        callback(null, html);
    });

    inputStream.on('error', function(err){
        callback(err);
    });

    inputStream.resume();
}

function inline(html, callback)
{
    juice.juiceContent(html, { url: 1, preserveMediaQueries: args.p, removeStyleTags: args.r }, callback);
}

function writeOut(html, stream, callback)
{
    if (stream === process.stdout) {
        outputStream.write(html, 'utf-8', callback);
    } else {
        outputStream.end(html, 'utf-8', callback);
    }
}

function onError(err, message)
{
    if (message) {
        process.stderr.write(message + "\n");
    }

    if (err) {
        process.stderr.write(err.stack + "\n");
    }

    process.exit(1);
}

if (args.h) {
    optimist.showHelp();
    process.exit(1);
}

if (args.i && !fs.existsSync(args.i)) {
    onError(null, "input file does not exists: " + args.i);
}

var inputStream  = args.i ? fs.createReadStream(args.i) : process.stdin;
var outputStream = args.o ? fs.createWriteStream(args.o) : process.stdout;

readInput(inputStream, function(err, inputData){

    if (err) { onError(err, "Unable to read from input"); }

    inline(inputData, function(err, inlinedData){

        if (err) { onError(err, "Unable to inline styles"); }

        writeOut(inlinedData, outputStream, function(err) {

            if (err) { onError(err, "Unable to write output"); }

            process.exit(0);
        });
    });
});